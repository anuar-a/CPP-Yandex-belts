// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#include "transport_catalog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusStopResponse_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteResponse_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransportCatalog_RouteResponsesEntry_DoNotUse_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransportCatalog_StopResponsesEntry_DoNotUse_transport_5fcatalog_2eproto;
namespace Serializer {
class BusStopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusStopResponse> _instance;
} _BusStopResponse_default_instance_;
class RouteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteResponse> _instance;
} _RouteResponse_default_instance_;
class TransportCatalog_StopResponsesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportCatalog_StopResponsesEntry_DoNotUse> _instance;
} _TransportCatalog_StopResponsesEntry_DoNotUse_default_instance_;
class TransportCatalog_RouteResponsesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportCatalog_RouteResponsesEntry_DoNotUse> _instance;
} _TransportCatalog_RouteResponsesEntry_DoNotUse_default_instance_;
class TransportCatalogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportCatalog> _instance;
} _TransportCatalog_default_instance_;
}  // namespace Serializer
static void InitDefaultsscc_info_BusStopResponse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_BusStopResponse_default_instance_;
    new (ptr) ::Serializer::BusStopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::BusStopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusStopResponse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BusStopResponse_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_RouteResponse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_RouteResponse_default_instance_;
    new (ptr) ::Serializer::RouteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::RouteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteResponse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RouteResponse_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_TransportCatalog_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_TransportCatalog_default_instance_;
    new (ptr) ::Serializer::TransportCatalog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::TransportCatalog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransportCatalog_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TransportCatalog_transport_5fcatalog_2eproto}, {
      &scc_info_TransportCatalog_StopResponsesEntry_DoNotUse_transport_5fcatalog_2eproto.base,
      &scc_info_TransportCatalog_RouteResponsesEntry_DoNotUse_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_TransportCatalog_RouteResponsesEntry_DoNotUse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_TransportCatalog_RouteResponsesEntry_DoNotUse_default_instance_;
    new (ptr) ::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse();
  }
  ::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransportCatalog_RouteResponsesEntry_DoNotUse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransportCatalog_RouteResponsesEntry_DoNotUse_transport_5fcatalog_2eproto}, {
      &scc_info_RouteResponse_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_TransportCatalog_StopResponsesEntry_DoNotUse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_TransportCatalog_StopResponsesEntry_DoNotUse_default_instance_;
    new (ptr) ::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse();
  }
  ::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransportCatalog_StopResponsesEntry_DoNotUse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransportCatalog_StopResponsesEntry_DoNotUse_transport_5fcatalog_2eproto}, {
      &scc_info_BusStopResponse_transport_5fcatalog_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalog_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fcatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::BusStopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::BusStopResponse, buses_on_stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::RouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::RouteResponse, stops_on_route_),
  PROTOBUF_FIELD_OFFSET(::Serializer::RouteResponse, unique_stops_),
  PROTOBUF_FIELD_OFFSET(::Serializer::RouteResponse, route_length_),
  PROTOBUF_FIELD_OFFSET(::Serializer::RouteResponse, curvature_),
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog, stop_responses_),
  PROTOBUF_FIELD_OFFSET(::Serializer::TransportCatalog, route_responses_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Serializer::BusStopResponse)},
  { 6, -1, sizeof(::Serializer::RouteResponse)},
  { 15, 22, sizeof(::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse)},
  { 24, 31, sizeof(::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse)},
  { 33, -1, sizeof(::Serializer::TransportCatalog)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_BusStopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_RouteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_TransportCatalog_StopResponsesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_TransportCatalog_RouteResponsesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_TransportCatalog_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027transport_catalog.proto\022\nSerializer\"(\n"
  "\017BusStopResponse\022\025\n\rbuses_on_stop\030\001 \003(\t\""
  "f\n\rRouteResponse\022\026\n\016stops_on_route\030\001 \001(\005"
  "\022\024\n\014unique_stops\030\002 \001(\005\022\024\n\014route_length\030\003"
  " \001(\r\022\021\n\tcurvature\030\004 \001(\002\"\313\002\n\020TransportCat"
  "alog\022G\n\016stop_responses\030\001 \003(\0132/.Serialize"
  "r.TransportCatalog.StopResponsesEntry\022I\n"
  "\017route_responses\030\002 \003(\01320.Serializer.Tran"
  "sportCatalog.RouteResponsesEntry\032Q\n\022Stop"
  "ResponsesEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001"
  "(\0132\033.Serializer.BusStopResponse:\0028\001\032P\n\023R"
  "outeResponsesEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value"
  "\030\002 \001(\0132\031.Serializer.RouteResponse:\0028\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fcatalog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5fcatalog_2eproto_sccs[5] = {
  &scc_info_BusStopResponse_transport_5fcatalog_2eproto.base,
  &scc_info_RouteResponse_transport_5fcatalog_2eproto.base,
  &scc_info_TransportCatalog_transport_5fcatalog_2eproto.base,
  &scc_info_TransportCatalog_RouteResponsesEntry_DoNotUse_transport_5fcatalog_2eproto.base,
  &scc_info_TransportCatalog_StopResponsesEntry_DoNotUse_transport_5fcatalog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalog_2eproto_once;
static bool descriptor_table_transport_5fcatalog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto = {
  &descriptor_table_transport_5fcatalog_2eproto_initialized, descriptor_table_protodef_transport_5fcatalog_2eproto, "transport_catalog.proto", 525,
  &descriptor_table_transport_5fcatalog_2eproto_once, descriptor_table_transport_5fcatalog_2eproto_sccs, descriptor_table_transport_5fcatalog_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_transport_5fcatalog_2eproto::offsets,
  file_level_metadata_transport_5fcatalog_2eproto, 5, file_level_enum_descriptors_transport_5fcatalog_2eproto, file_level_service_descriptors_transport_5fcatalog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5fcatalog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5fcatalog_2eproto), true);
namespace Serializer {

// ===================================================================

void BusStopResponse::InitAsDefaultInstance() {
}
class BusStopResponse::_Internal {
 public:
};

BusStopResponse::BusStopResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.BusStopResponse)
}
BusStopResponse::BusStopResponse(const BusStopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      buses_on_stop_(from.buses_on_stop_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serializer.BusStopResponse)
}

void BusStopResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusStopResponse_transport_5fcatalog_2eproto.base);
}

BusStopResponse::~BusStopResponse() {
  // @@protoc_insertion_point(destructor:Serializer.BusStopResponse)
  SharedDtor();
}

void BusStopResponse::SharedDtor() {
}

void BusStopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusStopResponse& BusStopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusStopResponse_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void BusStopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.BusStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buses_on_stop_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BusStopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string buses_on_stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_buses_on_stop(), ptr, ctx, "Serializer.BusStopResponse.buses_on_stop");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BusStopResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.BusStopResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string buses_on_stop = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_buses_on_stop()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->buses_on_stop(this->buses_on_stop_size() - 1).data(),
            static_cast<int>(this->buses_on_stop(this->buses_on_stop_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Serializer.BusStopResponse.buses_on_stop"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.BusStopResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.BusStopResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BusStopResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.BusStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string buses_on_stop = 1;
  for (int i = 0, n = this->buses_on_stop_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->buses_on_stop(i).data(), static_cast<int>(this->buses_on_stop(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serializer.BusStopResponse.buses_on_stop");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->buses_on_stop(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.BusStopResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* BusStopResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.BusStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string buses_on_stop = 1;
  for (int i = 0, n = this->buses_on_stop_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->buses_on_stop(i).data(), static_cast<int>(this->buses_on_stop(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serializer.BusStopResponse.buses_on_stop");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->buses_on_stop(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.BusStopResponse)
  return target;
}

size_t BusStopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.BusStopResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string buses_on_stop = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->buses_on_stop_size());
  for (int i = 0, n = this->buses_on_stop_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->buses_on_stop(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusStopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.BusStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BusStopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusStopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.BusStopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.BusStopResponse)
    MergeFrom(*source);
  }
}

void BusStopResponse::MergeFrom(const BusStopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.BusStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buses_on_stop_.MergeFrom(from.buses_on_stop_);
}

void BusStopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.BusStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusStopResponse::CopyFrom(const BusStopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.BusStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusStopResponse::IsInitialized() const {
  return true;
}

void BusStopResponse::InternalSwap(BusStopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buses_on_stop_.InternalSwap(CastToBase(&other->buses_on_stop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BusStopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteResponse::InitAsDefaultInstance() {
}
class RouteResponse::_Internal {
 public:
};

RouteResponse::RouteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.RouteResponse)
}
RouteResponse::RouteResponse(const RouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stops_on_route_, &from.stops_on_route_,
    static_cast<size_t>(reinterpret_cast<char*>(&curvature_) -
    reinterpret_cast<char*>(&stops_on_route_)) + sizeof(curvature_));
  // @@protoc_insertion_point(copy_constructor:Serializer.RouteResponse)
}

void RouteResponse::SharedCtor() {
  ::memset(&stops_on_route_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curvature_) -
      reinterpret_cast<char*>(&stops_on_route_)) + sizeof(curvature_));
}

RouteResponse::~RouteResponse() {
  // @@protoc_insertion_point(destructor:Serializer.RouteResponse)
  SharedDtor();
}

void RouteResponse::SharedDtor() {
}

void RouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteResponse& RouteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteResponse_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void RouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.RouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stops_on_route_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curvature_) -
      reinterpret_cast<char*>(&stops_on_route_)) + sizeof(curvature_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stops_on_route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stops_on_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 unique_stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unique_stops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 route_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          route_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float curvature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RouteResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.RouteResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 stops_on_route = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &stops_on_route_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 unique_stops = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &unique_stops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 route_length = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float curvature = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.RouteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.RouteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RouteResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.RouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stops_on_route = 1;
  if (this->stops_on_route() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->stops_on_route(), output);
  }

  // int32 unique_stops = 2;
  if (this->unique_stops() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->unique_stops(), output);
  }

  // uint32 route_length = 3;
  if (this->route_length() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->route_length(), output);
  }

  // float curvature = 4;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->curvature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.RouteResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.RouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stops_on_route = 1;
  if (this->stops_on_route() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->stops_on_route(), target);
  }

  // int32 unique_stops = 2;
  if (this->unique_stops() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->unique_stops(), target);
  }

  // uint32 route_length = 3;
  if (this->route_length() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->route_length(), target);
  }

  // float curvature = 4;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->curvature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.RouteResponse)
  return target;
}

size_t RouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.RouteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stops_on_route = 1;
  if (this->stops_on_route() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->stops_on_route());
  }

  // int32 unique_stops = 2;
  if (this->unique_stops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->unique_stops());
  }

  // uint32 route_length = 3;
  if (this->route_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->route_length());
  }

  // float curvature = 4;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.RouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.RouteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.RouteResponse)
    MergeFrom(*source);
  }
}

void RouteResponse::MergeFrom(const RouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.RouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stops_on_route() != 0) {
    set_stops_on_route(from.stops_on_route());
  }
  if (from.unique_stops() != 0) {
    set_unique_stops(from.unique_stops());
  }
  if (from.route_length() != 0) {
    set_route_length(from.route_length());
  }
  if (!(from.curvature() <= 0 && from.curvature() >= 0)) {
    set_curvature(from.curvature());
  }
}

void RouteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.RouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteResponse::CopyFrom(const RouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.RouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteResponse::IsInitialized() const {
  return true;
}

void RouteResponse::InternalSwap(RouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stops_on_route_, other->stops_on_route_);
  swap(unique_stops_, other->unique_stops_);
  swap(route_length_, other->route_length_);
  swap(curvature_, other->curvature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TransportCatalog_StopResponsesEntry_DoNotUse::TransportCatalog_StopResponsesEntry_DoNotUse() {}
TransportCatalog_StopResponsesEntry_DoNotUse::TransportCatalog_StopResponsesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransportCatalog_StopResponsesEntry_DoNotUse::MergeFrom(const TransportCatalog_StopResponsesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalog_StopResponsesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TransportCatalog_StopResponsesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TransportCatalog_RouteResponsesEntry_DoNotUse::TransportCatalog_RouteResponsesEntry_DoNotUse() {}
TransportCatalog_RouteResponsesEntry_DoNotUse::TransportCatalog_RouteResponsesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransportCatalog_RouteResponsesEntry_DoNotUse::MergeFrom(const TransportCatalog_RouteResponsesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalog_RouteResponsesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TransportCatalog_RouteResponsesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TransportCatalog::InitAsDefaultInstance() {
}
class TransportCatalog::_Internal {
 public:
};

TransportCatalog::TransportCatalog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.TransportCatalog)
}
TransportCatalog::TransportCatalog(const TransportCatalog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stop_responses_.MergeFrom(from.stop_responses_);
  route_responses_.MergeFrom(from.route_responses_);
  // @@protoc_insertion_point(copy_constructor:Serializer.TransportCatalog)
}

void TransportCatalog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportCatalog_transport_5fcatalog_2eproto.base);
}

TransportCatalog::~TransportCatalog() {
  // @@protoc_insertion_point(destructor:Serializer.TransportCatalog)
  SharedDtor();
}

void TransportCatalog::SharedDtor() {
}

void TransportCatalog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportCatalog& TransportCatalog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportCatalog_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void TransportCatalog::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_responses_.Clear();
  route_responses_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransportCatalog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .Serializer.BusStopResponse> stop_responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&stop_responses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // map<string, .Serializer.RouteResponse> route_responses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&route_responses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransportCatalog::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.TransportCatalog)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .Serializer.BusStopResponse> stop_responses = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          TransportCatalog_StopResponsesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TransportCatalog_StopResponsesEntry_DoNotUse,
              std::string, ::Serializer::BusStopResponse,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse > > parser(&stop_responses_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Serializer.TransportCatalog.StopResponsesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .Serializer.RouteResponse> route_responses = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          TransportCatalog_RouteResponsesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TransportCatalog_RouteResponsesEntry_DoNotUse,
              std::string, ::Serializer::RouteResponse,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse > > parser(&route_responses_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Serializer.TransportCatalog.RouteResponsesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.TransportCatalog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.TransportCatalog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransportCatalog::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .Serializer.BusStopResponse> stop_responses = 1;
  if (!this->stop_responses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Serializer.TransportCatalog.StopResponsesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->stop_responses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->stop_responses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse >::const_iterator
          it = this->stop_responses().begin();
          it != this->stop_responses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TransportCatalog_StopResponsesEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse >::const_iterator
          it = this->stop_responses().begin();
          it != this->stop_responses().end(); ++it) {
        TransportCatalog_StopResponsesEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Serializer.RouteResponse> route_responses = 2;
  if (!this->route_responses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Serializer.TransportCatalog.RouteResponsesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->route_responses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->route_responses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse >::const_iterator
          it = this->route_responses().begin();
          it != this->route_responses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TransportCatalog_RouteResponsesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse >::const_iterator
          it = this->route_responses().begin();
          it != this->route_responses().end(); ++it) {
        TransportCatalog_RouteResponsesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.TransportCatalog)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportCatalog::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .Serializer.BusStopResponse> stop_responses = 1;
  if (!this->stop_responses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Serializer.TransportCatalog.StopResponsesEntry.key");
      }
    };

    if (false &&
        this->stop_responses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->stop_responses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse >::const_iterator
          it = this->stop_responses().begin();
          it != this->stop_responses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TransportCatalog_StopResponsesEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse >::const_iterator
          it = this->stop_responses().begin();
          it != this->stop_responses().end(); ++it) {
        target = TransportCatalog_StopResponsesEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Serializer.RouteResponse> route_responses = 2;
  if (!this->route_responses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Serializer.TransportCatalog.RouteResponsesEntry.key");
      }
    };

    if (false &&
        this->route_responses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->route_responses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse >::const_iterator
          it = this->route_responses().begin();
          it != this->route_responses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TransportCatalog_RouteResponsesEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse >::const_iterator
          it = this->route_responses().begin();
          it != this->route_responses().end(); ++it) {
        target = TransportCatalog_RouteResponsesEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.TransportCatalog)
  return target;
}

size_t TransportCatalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.TransportCatalog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Serializer.BusStopResponse> stop_responses = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->stop_responses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::BusStopResponse >::const_iterator
      it = this->stop_responses().begin();
      it != this->stop_responses().end(); ++it) {
    total_size += TransportCatalog_StopResponsesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Serializer.RouteResponse> route_responses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->route_responses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Serializer::RouteResponse >::const_iterator
      it = this->route_responses().begin();
      it != this->route_responses().end(); ++it) {
    total_size += TransportCatalog_RouteResponsesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportCatalog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.TransportCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportCatalog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportCatalog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.TransportCatalog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.TransportCatalog)
    MergeFrom(*source);
  }
}

void TransportCatalog::MergeFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.TransportCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_responses_.MergeFrom(from.stop_responses_);
  route_responses_.MergeFrom(from.route_responses_);
}

void TransportCatalog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.TransportCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportCatalog::CopyFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.TransportCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalog::IsInitialized() const {
  return true;
}

void TransportCatalog::InternalSwap(TransportCatalog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stop_responses_.Swap(&other->stop_responses_);
  route_responses_.Swap(&other->route_responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalog::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Serializer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Serializer::BusStopResponse* Arena::CreateMaybeMessage< ::Serializer::BusStopResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::BusStopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::RouteResponse* Arena::CreateMaybeMessage< ::Serializer::RouteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::RouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse* Arena::CreateMaybeMessage< ::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::TransportCatalog_StopResponsesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse* Arena::CreateMaybeMessage< ::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::TransportCatalog_RouteResponsesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::TransportCatalog* Arena::CreateMaybeMessage< ::Serializer::TransportCatalog >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::TransportCatalog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
